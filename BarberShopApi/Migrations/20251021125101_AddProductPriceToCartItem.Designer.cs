// <auto-generated />
using System;
using BarberShopApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BarberShopApi.Migrations
{
    [DbContext(typeof(BarberShopDbContext))]
    [Migration("20251021125101_AddProductPriceToCartItem")]
    partial class AddProductPriceToCartItem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BarberShopApi.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BookingDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LoyaltyPointsEarned")
                        .HasColumnType("int");

                    b.Property<int?>("LoyaltyPointsUsed")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("BarberShopApi.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Nguyễn Huệ, Quận 1, TP.HCM",
                            CreatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 10, DateTimeKind.Utc).AddTicks(9767),
                            Description = "Chi nhánh chính tại trung tâm thành phố",
                            IsActive = true,
                            Name = "Chi Nhánh Quận 1",
                            Phone = "028-1234-5678",
                            UpdatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 10, DateTimeKind.Utc).AddTicks(9012)
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Lê Văn Sỹ, Quận 3, TP.HCM",
                            CreatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 10, DateTimeKind.Utc).AddTicks(9910),
                            Description = "Chi nhánh tại khu vực sầm uất",
                            IsActive = true,
                            Name = "Chi Nhánh Quận 3",
                            Phone = "028-2345-6789",
                            UpdatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 10, DateTimeKind.Utc).AddTicks(9907)
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Nguyễn Thị Thập, Quận 7, TP.HCM",
                            CreatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 10, DateTimeKind.Utc).AddTicks(9912),
                            Description = "Chi nhánh tại khu đô thị mới",
                            IsActive = true,
                            Name = "Chi Nhánh Quận 7",
                            Phone = "028-3456-7890",
                            UpdatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 10, DateTimeKind.Utc).AddTicks(9911)
                        });
                });

            modelBuilder.Entity("BarberShopApi.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("BarberShopApi.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ProductDiscountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("BarberShopApi.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 9, DateTimeKind.Utc).AddTicks(5003),
                            Description = "Các loại dầu gội chuyên nghiệp",
                            IsActive = true,
                            Name = "Dầu Gội",
                            UpdatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 9, DateTimeKind.Utc).AddTicks(3873)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 9, DateTimeKind.Utc).AddTicks(5193),
                            Description = "Dầu xả và kem ủ tóc",
                            IsActive = true,
                            Name = "Dầu Xả",
                            UpdatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 9, DateTimeKind.Utc).AddTicks(5191)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 9, DateTimeKind.Utc).AddTicks(5194),
                            Description = "Gel, wax, pomade tạo kiểu tóc",
                            IsActive = true,
                            Name = "Sản Phẩm Tạo Kiểu",
                            UpdatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 9, DateTimeKind.Utc).AddTicks(5193)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 9, DateTimeKind.Utc).AddTicks(5198),
                            Description = "Kéo, máy cắt, dao cạo",
                            IsActive = true,
                            Name = "Dụng Cụ Cắt Tóc",
                            UpdatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 9, DateTimeKind.Utc).AddTicks(5198)
                        });
                });

            modelBuilder.Entity("BarberShopApi.Models.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachmentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFromUser")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("MessageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("BarberShopApi.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeliveryMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DeliveryPhone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal?>("DiscountAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("LoyaltyPointsEarned")
                        .HasColumnType("int");

                    b.Property<int?>("LoyaltyPointsUsed")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShippingAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShippingPhone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BarberShopApi.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("DiscountAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("BarberShopApi.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("DiscountPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ImageGallery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Size")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 10, DateTimeKind.Utc).AddTicks(7869),
                            Description = "Dầu gội Pantene Pro-V cho tóc mềm mượt",
                            IsActive = true,
                            Name = "Dầu Gội Pantene",
                            Price = 120000m,
                            StockQuantity = 50,
                            UpdatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 10, DateTimeKind.Utc).AddTicks(6834)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 10, DateTimeKind.Utc).AddTicks(8008),
                            Description = "Gel tạo kiểu tóc nam cao cấp",
                            IsActive = true,
                            Name = "Gel Tạo Kiểu Gatsby",
                            Price = 80000m,
                            StockQuantity = 30,
                            UpdatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 10, DateTimeKind.Utc).AddTicks(8006)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 10, DateTimeKind.Utc).AddTicks(8010),
                            Description = "Kéo cắt tóc chất lượng cao",
                            IsActive = true,
                            Name = "Kéo Cắt Tóc Chuyên Nghiệp",
                            Price = 500000m,
                            StockQuantity = 10,
                            UpdatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 10, DateTimeKind.Utc).AddTicks(8009)
                        });
                });

            modelBuilder.Entity("BarberShopApi.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("BarberShopApi.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 10, DateTimeKind.Utc).AddTicks(5041),
                            Description = "Cắt tóc nam theo phong cách hiện đại",
                            DurationMinutes = 30,
                            IsActive = true,
                            Name = "Cắt Tóc Nam",
                            Price = 150000m,
                            UpdatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 10, DateTimeKind.Utc).AddTicks(3865)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 10, DateTimeKind.Utc).AddTicks(5177),
                            Description = "Cắt tóc nữ theo xu hướng mới nhất",
                            DurationMinutes = 45,
                            IsActive = true,
                            Name = "Cắt Tóc Nữ",
                            Price = 200000m,
                            UpdatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 10, DateTimeKind.Utc).AddTicks(5174)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 10, DateTimeKind.Utc).AddTicks(5179),
                            Description = "Gội đầu và massage da đầu",
                            DurationMinutes = 20,
                            IsActive = true,
                            Name = "Gội Đầu",
                            Price = 50000m,
                            UpdatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 10, DateTimeKind.Utc).AddTicks(5178)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 10, DateTimeKind.Utc).AddTicks(5181),
                            Description = "Uốn tóc tạo kiểu",
                            DurationMinutes = 120,
                            IsActive = true,
                            Name = "Uốn Tóc",
                            Price = 500000m,
                            UpdatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 10, DateTimeKind.Utc).AddTicks(5180)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 10, DateTimeKind.Utc).AddTicks(5182),
                            Description = "Nhuộm tóc màu sắc đa dạng",
                            DurationMinutes = 90,
                            IsActive = true,
                            Name = "Nhuộm Tóc",
                            Price = 400000m,
                            UpdatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 10, DateTimeKind.Utc).AddTicks(5181)
                        });
                });

            modelBuilder.Entity("BarberShopApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("LoyaltyPoints")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BarberShopApi.Models.UserVoucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("UserVouchers");
                });

            modelBuilder.Entity("BarberShopApi.Models.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("DiscountAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaxUsageCount")
                        .HasColumnType("int");

                    b.Property<decimal>("MinimumOrderAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Vouchers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "WELCOME10",
                            CreatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 13, DateTimeKind.Utc).AddTicks(5805),
                            Description = "Áp dụng cho đơn hàng đầu tiên",
                            DiscountAmount = 10m,
                            DiscountType = "Percentage",
                            IsActive = true,
                            MaxUsageCount = 1000,
                            MinimumOrderAmount = 100000m,
                            Name = "Giảm 10% cho khách hàng mới",
                            UpdatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 13, DateTimeKind.Utc).AddTicks(3766),
                            UsedCount = 0,
                            ValidFrom = new DateTime(2025, 10, 21, 12, 51, 1, 13, DateTimeKind.Utc).AddTicks(5239),
                            ValidTo = new DateTime(2026, 4, 21, 12, 51, 1, 13, DateTimeKind.Utc).AddTicks(5386)
                        },
                        new
                        {
                            Id = 2,
                            Code = "SAVE50K",
                            CreatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 13, DateTimeKind.Utc).AddTicks(5937),
                            Description = "Áp dụng cho đơn hàng từ 300k",
                            DiscountAmount = 50000m,
                            DiscountType = "FixedAmount",
                            IsActive = true,
                            MaxUsageCount = 500,
                            MinimumOrderAmount = 300000m,
                            Name = "Giảm 50k cho đơn hàng từ 300k",
                            UpdatedAt = new DateTime(2025, 10, 21, 12, 51, 1, 13, DateTimeKind.Utc).AddTicks(5930),
                            UsedCount = 0,
                            ValidFrom = new DateTime(2025, 10, 21, 12, 51, 1, 13, DateTimeKind.Utc).AddTicks(5933),
                            ValidTo = new DateTime(2026, 1, 21, 12, 51, 1, 13, DateTimeKind.Utc).AddTicks(5934)
                        });
                });

            modelBuilder.Entity("BarberShopApi.Models.Booking", b =>
                {
                    b.HasOne("BarberShopApi.Models.Service", "Service")
                        .WithMany("Bookings")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BarberShopApi.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BarberShopApi.Models.Cart", b =>
                {
                    b.HasOne("BarberShopApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BarberShopApi.Models.CartItem", b =>
                {
                    b.HasOne("BarberShopApi.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarberShopApi.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BarberShopApi.Models.ChatMessage", b =>
                {
                    b.HasOne("BarberShopApi.Models.User", "User")
                        .WithMany("ChatMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BarberShopApi.Models.Order", b =>
                {
                    b.HasOne("BarberShopApi.Models.Branch", "Branch")
                        .WithMany("Orders")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BarberShopApi.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BarberShopApi.Models.OrderItem", b =>
                {
                    b.HasOne("BarberShopApi.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarberShopApi.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BarberShopApi.Models.Product", b =>
                {
                    b.HasOne("BarberShopApi.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BarberShopApi.Models.Review", b =>
                {
                    b.HasOne("BarberShopApi.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarberShopApi.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BarberShopApi.Models.UserVoucher", b =>
                {
                    b.HasOne("BarberShopApi.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BarberShopApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BarberShopApi.Models.Voucher", "Voucher")
                        .WithMany("UserVouchers")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("BarberShopApi.Models.Branch", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BarberShopApi.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("BarberShopApi.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BarberShopApi.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("BarberShopApi.Models.Product", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("BarberShopApi.Models.Service", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BarberShopApi.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("ChatMessages");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BarberShopApi.Models.Voucher", b =>
                {
                    b.Navigation("UserVouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
